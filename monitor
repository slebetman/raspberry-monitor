#! /usr/bin/env node

var raspInfo = require('raspberry-info');
var asyncq = require('async-q');
var clearScreen = require('cross-clear');
var isRoot = require('is-root');
var cpuInfo = require('./lib/cpu');

if (!isRoot()) {
	console.log('Please sudo me!');
	process.exit();
}

var barChars = ' ▏▎▍▌▋▊▉█'.split('');

function drawBar(fraction, width) {
	if (fraction > 1) fraction = 1;
	
	var totalPx = width * barChars.length;
	var px = Math.round(fraction * totalPx);
	var chars = Math.floor(px/barChars.length);
	var detail = px%barChars.length;
	var remainder = width-chars-1;
	
	if (fraction < 1 && remainder >= 0) {
		return '[' + 
			barChars.slice(-1)[0].repeat(chars) + 
			barChars[detail] + 
			' '.repeat(remainder) +
		']  ';
	}
	else {
		return '[' + barChars.slice(-1)[0].repeat(width) + ']  ';
	}
}

function pad (txt, width) {
	txt = txt.replace(/\r|\n/g,'');
	if (width < txt.length) return txt;
	return txt + ' '.repeat(width - txt.length);
}

setInterval(function(){
	asyncq.parallel({
		cpuTemp: raspInfo.getCPUTemperature,
		gpuTemp: raspInfo.getGPUTemperature,
		memFree: raspInfo.getMemoryFree,
		memAvailable: raspInfo.getMemoryAvailable,
		memTotal: raspInfo.getMemoryTotal,
		cpu: cpuInfo
	})
	.then(info => {
		var BAR_LENGTH = 10;
		var OFFSET_TEMP = 25; // use approx room temp as baseline instead of zero
		var cpuT = parseFloat(info.cpuTemp);
		var gpuT = parseFloat(info.gpuTemp);
		var mF = parseFloat(info.memFree)/1024;
		var mA = parseFloat(info.memAvailable)/1024;
		var mT = parseFloat(info.memTotal)/1024;
		var mU = (mT-mA)/mT;
		
		clearScreen();
		console.log(new Date().toLocaleString());
		console.log(
			`CPU Temp = ${pad(info.cpuTemp,8)}` + 
			drawBar((cpuT-OFFSET_TEMP)/(80-OFFSET_TEMP),BAR_LENGTH) + 
			`Mem Use  = ${pad((mU*100).toFixed(1) + '%',8)}` + 
			drawBar(mU,BAR_LENGTH) 
		);
		console.log(
			`GPU Temp = ${pad(info.gpuTemp,8)}` + 
			drawBar((gpuT-OFFSET_TEMP)/(80-OFFSET_TEMP),BAR_LENGTH) +
			`CPU Use  = ${pad(info.cpu.percentUsed.toFixed(1) + '%',8)}` + 
			drawBar(info.cpu.percentUsed/100,BAR_LENGTH)
		);
	})
	.catch(err => {
		console.error(err);
		process.exit(-1);
	});
},1000);

